node|z17-[addr:housenumber]::housenumber,
area|z17-[addr:housenumber]::housenumber
{
  font-size: 8;
  text-color: #505050;
  text-halo-radius: 0;
  layer: 10;
  z-index: 100;
  text: eval(tag('addr:housenumber'));
  set .has_housenumber;
}
line|z17-[addr:interpolation]::housenumber
{
  color: #505050;
  width: 0.5;
  dashes: 2,4;
  layer: 7;
}

/* Remove housenumbers inside areas with the same housenumber */
area[addr:housenumber] near[distance=0] node.has_housenumber|z17-::housenumber {
  unset .has_housenumber;
  text: ;
}

/* Check all highways near the housenumber and if the name is correct save the street's geometry to tag ".housenumber_street_geo" */
// TODO: we assume that the function is called with increasing distance
line[highway] near[distance<100] node.has_housenumber|z17-::housenumber_tmp,
line[highway] near[distance<100] area.has_housenumber|z17-::housenumber_tmp {
  set .housenumber_street_geo = eval(
    cond(tag(".housenumber_street_geo"),
      tag(".housenumber_street_geo"),
      cond(tag("addr:street") eq parent_tag("name"),
        parent_geo(),
        ''
      )
  ));
}

/* Now build a line parallel to the street on top of the address-point, which will hold the label */
node.has_housenumber|z17-[.housenumber_street_geo!='']::housenumber,
area.has_housenumber|z17-[.housenumber_street_geo!='']::housenumber
{
  // calculate centroid (at least for areas)
  geo: eval(centroid(prop(geo)));

  // Find point on nearby street closest to the address-point (or centroid of area)
  set .geo_on_street = eval(line_interpolate_point(tag('.housenumber_street_geo'), line_locate_point(tag('.housenumber_street_geo'), prop(geo))));

  geo: eval(rotate(line(
    translate(prop(geo), '15px', 0),
    translate(prop(geo), '-15px', 0)
      ),
      0-azimuth(prop(geo), tag(".geo_on_street"))
    ));
  text-position: line;
}
